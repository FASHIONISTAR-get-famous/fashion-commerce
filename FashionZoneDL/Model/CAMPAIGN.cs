//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace FashionZone.DataLayer.Model
{
    public partial class CAMPAIGN
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual int BrandID
        {
            get { return _brandID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_brandID != value)
                    {
                        if (BRAND != null && BRAND.ID != value)
                        {
                            BRAND = null;
                        }
                        _brandID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _brandID;
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual System.DateTime StartDate
        {
            get;
            set;
        }
    
        public virtual System.DateTime EndDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DeliveryStartDate
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DeliveryEndDate
        {
            get;
            set;
        }
    
        public virtual string Logo
        {
            get;
            set;
        }
    
        public virtual string ImageHome
        {
            get;
            set;
        }
    
        public virtual string ImageDetail
        {
            get;
            set;
        }
    
        public virtual string ImageListHeader
        {
            get;
            set;
        }
    
        public virtual bool Active
        {
            get;
            set;
        }
    
        public virtual string GenericFile
        {
            get;
            set;
        }
    
        public virtual Nullable<bool> Approved
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ApprovedBy
        {
            get { return _approvedBy; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_approvedBy != value)
                    {
                        if (USER != null && USER.ID != value)
                        {
                            USER = null;
                        }
                        _approvedBy = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _approvedBy;

        #endregion

        #region Navigation Properties
    
        public virtual BRAND BRAND
        {
            get { return _bRAND; }
            set
            {
                if (!ReferenceEquals(_bRAND, value))
                {
                    var previousValue = _bRAND;
                    _bRAND = value;
                    FixupBRAND(previousValue);
                }
            }
        }
        private BRAND _bRAND;
    
        public virtual ICollection<ORDER_DETAIL> ORDER_DETAIL
        {
            get
            {
                if (_oRDER_DETAIL == null)
                {
                    var newCollection = new FixupCollection<ORDER_DETAIL>();
                    newCollection.CollectionChanged += FixupORDER_DETAIL;
                    _oRDER_DETAIL = newCollection;
                }
                return _oRDER_DETAIL;
            }
            set
            {
                if (!ReferenceEquals(_oRDER_DETAIL, value))
                {
                    var previousValue = _oRDER_DETAIL as FixupCollection<ORDER_DETAIL>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupORDER_DETAIL;
                    }
                    _oRDER_DETAIL = value;
                    var newValue = value as FixupCollection<ORDER_DETAIL>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupORDER_DETAIL;
                    }
                }
            }
        }
        private ICollection<ORDER_DETAIL> _oRDER_DETAIL;
    
        public virtual ICollection<SHOPPING_CART> SHOPPING_CART
        {
            get
            {
                if (_sHOPPING_CART == null)
                {
                    var newCollection = new FixupCollection<SHOPPING_CART>();
                    newCollection.CollectionChanged += FixupSHOPPING_CART;
                    _sHOPPING_CART = newCollection;
                }
                return _sHOPPING_CART;
            }
            set
            {
                if (!ReferenceEquals(_sHOPPING_CART, value))
                {
                    var previousValue = _sHOPPING_CART as FixupCollection<SHOPPING_CART>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupSHOPPING_CART;
                    }
                    _sHOPPING_CART = value;
                    var newValue = value as FixupCollection<SHOPPING_CART>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupSHOPPING_CART;
                    }
                }
            }
        }
        private ICollection<SHOPPING_CART> _sHOPPING_CART;
    
        public virtual USER USER
        {
            get { return _uSER; }
            set
            {
                if (!ReferenceEquals(_uSER, value))
                {
                    var previousValue = _uSER;
                    _uSER = value;
                    FixupUSER(previousValue);
                }
            }
        }
        private USER _uSER;
    
        public virtual ICollection<CATEGORY> CATEGORY
        {
            get
            {
                if (_cATEGORY == null)
                {
                    var newCollection = new FixupCollection<CATEGORY>();
                    newCollection.CollectionChanged += FixupCATEGORY;
                    _cATEGORY = newCollection;
                }
                return _cATEGORY;
            }
            set
            {
                if (!ReferenceEquals(_cATEGORY, value))
                {
                    var previousValue = _cATEGORY as FixupCollection<CATEGORY>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCATEGORY;
                    }
                    _cATEGORY = value;
                    var newValue = value as FixupCollection<CATEGORY>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCATEGORY;
                    }
                }
            }
        }
        private ICollection<CATEGORY> _cATEGORY;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupBRAND(BRAND previousValue)
        {
            if (previousValue != null && previousValue.CAMPAIGN.Contains(this))
            {
                previousValue.CAMPAIGN.Remove(this);
            }
    
            if (BRAND != null)
            {
                if (!BRAND.CAMPAIGN.Contains(this))
                {
                    BRAND.CAMPAIGN.Add(this);
                }
                if (BrandID != BRAND.ID)
                {
                    BrandID = BRAND.ID;
                }
            }
        }
    
        private void FixupUSER(USER previousValue)
        {
            if (previousValue != null && previousValue.CAMPAIGN.Contains(this))
            {
                previousValue.CAMPAIGN.Remove(this);
            }
    
            if (USER != null)
            {
                if (!USER.CAMPAIGN.Contains(this))
                {
                    USER.CAMPAIGN.Add(this);
                }
                if (ApprovedBy != USER.ID)
                {
                    ApprovedBy = USER.ID;
                }
            }
            else if (!_settingFK)
            {
                ApprovedBy = null;
            }
        }
    
        private void FixupORDER_DETAIL(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ORDER_DETAIL item in e.NewItems)
                {
                    item.CAMPAIGN = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ORDER_DETAIL item in e.OldItems)
                {
                    if (ReferenceEquals(item.CAMPAIGN, this))
                    {
                        item.CAMPAIGN = null;
                    }
                }
            }
        }
    
        private void FixupSHOPPING_CART(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (SHOPPING_CART item in e.NewItems)
                {
                    item.CAMPAIGN = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (SHOPPING_CART item in e.OldItems)
                {
                    if (ReferenceEquals(item.CAMPAIGN, this))
                    {
                        item.CAMPAIGN = null;
                    }
                }
            }
        }
    
        private void FixupCATEGORY(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CATEGORY item in e.NewItems)
                {
                    item.CAMPAIGN = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CATEGORY item in e.OldItems)
                {
                    if (ReferenceEquals(item.CAMPAIGN, this))
                    {
                        item.CAMPAIGN = null;
                    }
                }
            }
        }

        #endregion

    }
}
