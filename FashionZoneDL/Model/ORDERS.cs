//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace FashionZone.DataLayer.Model
{
    public partial class ORDERS
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual System.DateTime DateCreated
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DateShipped
        {
            get;
            set;
        }
    
        public virtual bool Verified
        {
            get;
            set;
        }
    
        public virtual bool Completed
        {
            get;
            set;
        }
    
        public virtual bool Canceled
        {
            get;
            set;
        }
    
        public virtual string Comments
        {
            get;
            set;
        }
    
        public virtual Nullable<int> CustomerID
        {
            get { return _customerID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_customerID != value)
                    {
                        if (CUSTOMER != null && CUSTOMER.ID != value)
                        {
                            CUSTOMER = null;
                        }
                        _customerID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _customerID;
    
        public virtual Nullable<int> ShippingID
        {
            get { return _shippingID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_shippingID != value)
                    {
                        if (SHIPPING != null && SHIPPING.ID != value)
                        {
                            SHIPPING = null;
                        }
                        _shippingID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _shippingID;
    
        public virtual decimal AmountPaid
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> BonusUsed
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ShippingAddress
        {
            get { return _shippingAddress; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_shippingAddress != value)
                    {
                        if (ADDRESSINFO != null && ADDRESSINFO.ID != value)
                        {
                            ADDRESSINFO = null;
                        }
                        _shippingAddress = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _shippingAddress;
    
        public virtual Nullable<int> BillingAddress
        {
            get { return _billingAddress; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_billingAddress != value)
                    {
                        if (ADDRESSINFO1 != null && ADDRESSINFO1.ID != value)
                        {
                            ADDRESSINFO1 = null;
                        }
                        _billingAddress = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _billingAddress;
    
        public virtual Nullable<int> Status
        {
            get { return _status; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_status != value)
                    {
                        if (D_ORDER_STATUS != null && D_ORDER_STATUS.ID != value)
                        {
                            D_ORDER_STATUS = null;
                        }
                        _status = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _status;
    
        public virtual string ShippingDetails
        {
            get;
            set;
        }
    
        public virtual decimal TotalAmount
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DateDelivered
        {
            get;
            set;
        }
    
        public virtual string TrackingNumber
        {
            get;
            set;
        }
    
        public virtual string VerificationNumber
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ADDRESSINFO ADDRESSINFO
        {
            get { return _aDDRESSINFO; }
            set
            {
                if (!ReferenceEquals(_aDDRESSINFO, value))
                {
                    var previousValue = _aDDRESSINFO;
                    _aDDRESSINFO = value;
                    FixupADDRESSINFO(previousValue);
                }
            }
        }
        private ADDRESSINFO _aDDRESSINFO;
    
        public virtual ADDRESSINFO ADDRESSINFO1
        {
            get { return _aDDRESSINFO1; }
            set
            {
                if (!ReferenceEquals(_aDDRESSINFO1, value))
                {
                    var previousValue = _aDDRESSINFO1;
                    _aDDRESSINFO1 = value;
                    FixupADDRESSINFO1(previousValue);
                }
            }
        }
        private ADDRESSINFO _aDDRESSINFO1;
    
        public virtual D_ORDER_STATUS D_ORDER_STATUS
        {
            get { return _d_ORDER_STATUS; }
            set
            {
                if (!ReferenceEquals(_d_ORDER_STATUS, value))
                {
                    var previousValue = _d_ORDER_STATUS;
                    _d_ORDER_STATUS = value;
                    FixupD_ORDER_STATUS(previousValue);
                }
            }
        }
        private D_ORDER_STATUS _d_ORDER_STATUS;
    
        public virtual SHIPPING SHIPPING
        {
            get { return _sHIPPING; }
            set
            {
                if (!ReferenceEquals(_sHIPPING, value))
                {
                    var previousValue = _sHIPPING;
                    _sHIPPING = value;
                    FixupSHIPPING(previousValue);
                }
            }
        }
        private SHIPPING _sHIPPING;
    
        public virtual ICollection<ORDER_BONUS> ORDER_BONUS
        {
            get
            {
                if (_oRDER_BONUS == null)
                {
                    var newCollection = new FixupCollection<ORDER_BONUS>();
                    newCollection.CollectionChanged += FixupORDER_BONUS;
                    _oRDER_BONUS = newCollection;
                }
                return _oRDER_BONUS;
            }
            set
            {
                if (!ReferenceEquals(_oRDER_BONUS, value))
                {
                    var previousValue = _oRDER_BONUS as FixupCollection<ORDER_BONUS>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupORDER_BONUS;
                    }
                    _oRDER_BONUS = value;
                    var newValue = value as FixupCollection<ORDER_BONUS>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupORDER_BONUS;
                    }
                }
            }
        }
        private ICollection<ORDER_BONUS> _oRDER_BONUS;
    
        public virtual ICollection<ORDER_NOTES> ORDER_NOTES
        {
            get
            {
                if (_oRDER_NOTES == null)
                {
                    var newCollection = new FixupCollection<ORDER_NOTES>();
                    newCollection.CollectionChanged += FixupORDER_NOTES;
                    _oRDER_NOTES = newCollection;
                }
                return _oRDER_NOTES;
            }
            set
            {
                if (!ReferenceEquals(_oRDER_NOTES, value))
                {
                    var previousValue = _oRDER_NOTES as FixupCollection<ORDER_NOTES>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupORDER_NOTES;
                    }
                    _oRDER_NOTES = value;
                    var newValue = value as FixupCollection<ORDER_NOTES>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupORDER_NOTES;
                    }
                }
            }
        }
        private ICollection<ORDER_NOTES> _oRDER_NOTES;
    
        public virtual PAYMENT PAYMENT
        {
            get { return _pAYMENT; }
            set
            {
                if (!ReferenceEquals(_pAYMENT, value))
                {
                    var previousValue = _pAYMENT;
                    _pAYMENT = value;
                    FixupPAYMENT(previousValue);
                }
            }
        }
        private PAYMENT _pAYMENT;
    
        public virtual ICollection<ORDER_DETAIL> ORDER_DETAIL
        {
            get
            {
                if (_oRDER_DETAIL == null)
                {
                    var newCollection = new FixupCollection<ORDER_DETAIL>();
                    newCollection.CollectionChanged += FixupORDER_DETAIL;
                    _oRDER_DETAIL = newCollection;
                }
                return _oRDER_DETAIL;
            }
            set
            {
                if (!ReferenceEquals(_oRDER_DETAIL, value))
                {
                    var previousValue = _oRDER_DETAIL as FixupCollection<ORDER_DETAIL>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupORDER_DETAIL;
                    }
                    _oRDER_DETAIL = value;
                    var newValue = value as FixupCollection<ORDER_DETAIL>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupORDER_DETAIL;
                    }
                }
            }
        }
        private ICollection<ORDER_DETAIL> _oRDER_DETAIL;
    
        public virtual ICollection<RETURN> RETURN
        {
            get
            {
                if (_rETURN == null)
                {
                    var newCollection = new FixupCollection<RETURN>();
                    newCollection.CollectionChanged += FixupRETURN;
                    _rETURN = newCollection;
                }
                return _rETURN;
            }
            set
            {
                if (!ReferenceEquals(_rETURN, value))
                {
                    var previousValue = _rETURN as FixupCollection<RETURN>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupRETURN;
                    }
                    _rETURN = value;
                    var newValue = value as FixupCollection<RETURN>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupRETURN;
                    }
                }
            }
        }
        private ICollection<RETURN> _rETURN;
    
        public virtual CUSTOMER CUSTOMER
        {
            get { return _cUSTOMER; }
            set
            {
                if (!ReferenceEquals(_cUSTOMER, value))
                {
                    var previousValue = _cUSTOMER;
                    _cUSTOMER = value;
                    FixupCUSTOMER(previousValue);
                }
            }
        }
        private CUSTOMER _cUSTOMER;

        #endregion

        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupADDRESSINFO(ADDRESSINFO previousValue)
        {
            if (ADDRESSINFO != null)
            {
                if (ShippingAddress != ADDRESSINFO.ID)
                {
                    ShippingAddress = ADDRESSINFO.ID;
                }
            }
            else if (!_settingFK)
            {
                ShippingAddress = null;
            }
        }
    
        private void FixupADDRESSINFO1(ADDRESSINFO previousValue)
        {
            if (ADDRESSINFO1 != null)
            {
                if (BillingAddress != ADDRESSINFO1.ID)
                {
                    BillingAddress = ADDRESSINFO1.ID;
                }
            }
            else if (!_settingFK)
            {
                BillingAddress = null;
            }
        }
    
        private void FixupD_ORDER_STATUS(D_ORDER_STATUS previousValue)
        {
            if (D_ORDER_STATUS != null)
            {
                if (Status != D_ORDER_STATUS.ID)
                {
                    Status = D_ORDER_STATUS.ID;
                }
            }
            else if (!_settingFK)
            {
                Status = null;
            }
        }
    
        private void FixupSHIPPING(SHIPPING previousValue)
        {
            if (SHIPPING != null)
            {
                if (ShippingID != SHIPPING.ID)
                {
                    ShippingID = SHIPPING.ID;
                }
            }
            else if (!_settingFK)
            {
                ShippingID = null;
            }
        }
    
        private void FixupPAYMENT(PAYMENT previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.ORDERS, this))
            {
                previousValue.ORDERS = null;
            }
    
            if (PAYMENT != null)
            {
                PAYMENT.ORDERS = this;
            }
        }
    
        private void FixupCUSTOMER(CUSTOMER previousValue)
        {
            if (previousValue != null && previousValue.ORDERS.Contains(this))
            {
                previousValue.ORDERS.Remove(this);
            }
    
            if (CUSTOMER != null)
            {
                if (!CUSTOMER.ORDERS.Contains(this))
                {
                    CUSTOMER.ORDERS.Add(this);
                }
                if (CustomerID != CUSTOMER.ID)
                {
                    CustomerID = CUSTOMER.ID;
                }
            }
            else if (!_settingFK)
            {
                CustomerID = null;
            }
        }
    
        private void FixupORDER_BONUS(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ORDER_BONUS item in e.NewItems)
                {
                    item.ORDERS = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ORDER_BONUS item in e.OldItems)
                {
                    if (ReferenceEquals(item.ORDERS, this))
                    {
                        item.ORDERS = null;
                    }
                }
            }
        }
    
        private void FixupORDER_NOTES(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ORDER_NOTES item in e.NewItems)
                {
                    item.OrderID = ID;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ORDER_NOTES item in e.OldItems)
                {
                }
            }
        }
    
        private void FixupORDER_DETAIL(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ORDER_DETAIL item in e.NewItems)
                {
                    item.ORDERS = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ORDER_DETAIL item in e.OldItems)
                {
                    if (ReferenceEquals(item.ORDERS, this))
                    {
                        item.ORDERS = null;
                    }
                }
            }
        }
    
        private void FixupRETURN(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (RETURN item in e.NewItems)
                {
                    item.ORDERS = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (RETURN item in e.OldItems)
                {
                    if (ReferenceEquals(item.ORDERS, this))
                    {
                        item.ORDERS = null;
                    }
                }
            }
        }

        #endregion

    }
}
