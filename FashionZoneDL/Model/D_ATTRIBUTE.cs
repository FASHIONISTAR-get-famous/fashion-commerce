//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace FashionZone.DataLayer.Model
{
    public partial class D_ATTRIBUTE
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ICollection<D_ATTRIBUTE_VALUE> D_ATTRIBUTE_VALUE
        {
            get
            {
                if (_d_ATTRIBUTE_VALUE == null)
                {
                    var newCollection = new FixupCollection<D_ATTRIBUTE_VALUE>();
                    newCollection.CollectionChanged += FixupD_ATTRIBUTE_VALUE;
                    _d_ATTRIBUTE_VALUE = newCollection;
                }
                return _d_ATTRIBUTE_VALUE;
            }
            set
            {
                if (!ReferenceEquals(_d_ATTRIBUTE_VALUE, value))
                {
                    var previousValue = _d_ATTRIBUTE_VALUE as FixupCollection<D_ATTRIBUTE_VALUE>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupD_ATTRIBUTE_VALUE;
                    }
                    _d_ATTRIBUTE_VALUE = value;
                    var newValue = value as FixupCollection<D_ATTRIBUTE_VALUE>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupD_ATTRIBUTE_VALUE;
                    }
                }
            }
        }
        private ICollection<D_ATTRIBUTE_VALUE> _d_ATTRIBUTE_VALUE;
    
        public virtual ICollection<CATEGORY> CATEGORY
        {
            get
            {
                if (_cATEGORY == null)
                {
                    var newCollection = new FixupCollection<CATEGORY>();
                    newCollection.CollectionChanged += FixupCATEGORY;
                    _cATEGORY = newCollection;
                }
                return _cATEGORY;
            }
            set
            {
                if (!ReferenceEquals(_cATEGORY, value))
                {
                    var previousValue = _cATEGORY as FixupCollection<CATEGORY>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupCATEGORY;
                    }
                    _cATEGORY = value;
                    var newValue = value as FixupCollection<CATEGORY>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupCATEGORY;
                    }
                }
            }
        }
        private ICollection<CATEGORY> _cATEGORY;

        #endregion

        #region Association Fixup
    
        private void FixupD_ATTRIBUTE_VALUE(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (D_ATTRIBUTE_VALUE item in e.NewItems)
                {
                    item.D_ATTRIBUTE = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (D_ATTRIBUTE_VALUE item in e.OldItems)
                {
                    if (ReferenceEquals(item.D_ATTRIBUTE, this))
                    {
                        item.D_ATTRIBUTE = null;
                    }
                }
            }
        }
    
        private void FixupCATEGORY(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (CATEGORY item in e.NewItems)
                {
                    item.D_ATTRIBUTE = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (CATEGORY item in e.OldItems)
                {
                    if (ReferenceEquals(item.D_ATTRIBUTE, this))
                    {
                        item.D_ATTRIBUTE = null;
                    }
                }
            }
        }

        #endregion

    }
}
