//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace FashionZone.DataLayer.Model
{
    public partial class PAYMENT
    {
        #region Primitive Properties
    
        public virtual int ID
        {
            get { return _iD; }
            set
            {
                if (_iD != value)
                {
                    if (ORDERS != null && ORDERS.ID != value)
                    {
                        ORDERS = null;
                    }
                    _iD = value;
                }
            }
        }
        private int _iD;
    
        public virtual int Type
        {
            get;
            set;
        }

        #endregion

        #region Navigation Properties
    
        public virtual ORDERS ORDERS
        {
            get { return _oRDERS; }
            set
            {
                if (!ReferenceEquals(_oRDERS, value))
                {
                    var previousValue = _oRDERS;
                    _oRDERS = value;
                    FixupORDERS(previousValue);
                }
            }
        }
        private ORDERS _oRDERS;
    
        public virtual PAYPAL_PAYMENT PAYPAL_PAYMENT
        {
            get { return _pAYPAL_PAYMENT; }
            set
            {
                if (!ReferenceEquals(_pAYPAL_PAYMENT, value))
                {
                    var previousValue = _pAYPAL_PAYMENT;
                    _pAYPAL_PAYMENT = value;
                    FixupPAYPAL_PAYMENT(previousValue);
                }
            }
        }
        private PAYPAL_PAYMENT _pAYPAL_PAYMENT;
    
        public virtual CASH_PAYMENT CASH_PAYMENT
        {
            get { return _cASH_PAYMENT; }
            set
            {
                if (!ReferenceEquals(_cASH_PAYMENT, value))
                {
                    var previousValue = _cASH_PAYMENT;
                    _cASH_PAYMENT = value;
                    FixupCASH_PAYMENT(previousValue);
                }
            }
        }
        private CASH_PAYMENT _cASH_PAYMENT;
    
        public virtual EASYPAY_PAYMENT EASYPAY_PAYMENT
        {
            get { return _eASYPAY_PAYMENT; }
            set
            {
                if (!ReferenceEquals(_eASYPAY_PAYMENT, value))
                {
                    var previousValue = _eASYPAY_PAYMENT;
                    _eASYPAY_PAYMENT = value;
                    FixupEASYPAY_PAYMENT(previousValue);
                }
            }
        }
        private EASYPAY_PAYMENT _eASYPAY_PAYMENT;

        #endregion

        #region Association Fixup
    
        private void FixupORDERS(ORDERS previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.PAYMENT, this))
            {
                previousValue.PAYMENT = null;
            }
    
            if (ORDERS != null)
            {
                ORDERS.PAYMENT = this;
                if (ID != ORDERS.ID)
                {
                    ID = ORDERS.ID;
                }
            }
        }
    
        private void FixupPAYPAL_PAYMENT(PAYPAL_PAYMENT previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.PAYMENT, this))
            {
                previousValue.PAYMENT = null;
            }
    
            if (PAYPAL_PAYMENT != null)
            {
                PAYPAL_PAYMENT.PAYMENT = this;
            }
        }
    
        private void FixupCASH_PAYMENT(CASH_PAYMENT previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.PAYMENT, this))
            {
                previousValue.PAYMENT = null;
            }
    
            if (CASH_PAYMENT != null)
            {
                CASH_PAYMENT.PAYMENT = this;
            }
        }
    
        private void FixupEASYPAY_PAYMENT(EASYPAY_PAYMENT previousValue)
        {
            if (previousValue != null && ReferenceEquals(previousValue.PAYMENT, this))
            {
                previousValue.PAYMENT = null;
            }
    
            if (EASYPAY_PAYMENT != null)
            {
                EASYPAY_PAYMENT.PAYMENT = this;
            }
        }

        #endregion

    }
}
